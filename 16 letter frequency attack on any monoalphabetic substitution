#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define MAX_TEXT_SIZE 1000
#define TOP_N 10

// Function to compute the frequency of each letter in the ciphertext
void computeFrequency(char *text, int *frequency) {
    int len = strlen(text);
    for (int i = 0; i < len; i++) {
        if (isalpha(text[i])) {
            frequency[tolower(text[i]) - 'a']++;
        }
    }
}

// Function to decrypt the ciphertext with a given substitution key
void decryptSubstitution(char *ciphertext, char *key, char *plaintext) {
    int len = strlen(ciphertext);
    for (int i = 0; i < len; i++) {
        if (isalpha(ciphertext[i])) {
            plaintext[i] = key[tolower(ciphertext[i]) - 'a'];
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[len] = '\0';
}

// Function to generate possible keys and decrypt the ciphertext
void generateKeysAndDecrypt(char *ciphertext, int *frequency, int topN) {
    char possibleKey[ALPHABET_SIZE];
    char plaintext[MAX_TEXT_SIZE];

    // Generate all possible permutations of alphabet
    // Note: For demonstration, only generating simple shifts
    for (int shift = 0; shift < ALPHABET_SIZE; shift++) {
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            possibleKey[i] = 'a' + (i + shift) % ALPHABET_SIZE;
        }
        decryptSubstitution(ciphertext, possibleKey, plaintext);
        printf("Possible Plaintext with shift %d: %s\n", shift, plaintext);
    }
}

int main() {
    char ciphertext[MAX_TEXT_SIZE];
    int topN;

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';  // Remove trailing newline

    printf("Enter the number of top possible plaintexts to show: ");
    scanf("%d", &topN);
    
    int frequency[ALPHABET_SIZE] = {0};
    computeFrequency(ciphertext, frequency);

    generateKeysAndDecrypt(ciphertext, frequency, topN);

    printf("\n\n\nsuthesan vj   192210542\n");

    return 0;
}
