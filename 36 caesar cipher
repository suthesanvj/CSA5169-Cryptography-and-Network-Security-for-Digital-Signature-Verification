#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET_SIZE 26

// Function to perform affine encryption
char affine_encrypt(char plaintext, int a, int b) {
    return (char) ((a * (plaintext - 'A') + b) % ALPHABET_SIZE + 'A');
}

// Function to perform affine decryption
char affine_decrypt(char ciphertext, int a_inverse, int b) {
    return (char) ((a_inverse * (ciphertext - 'A' - b) + ALPHABET_SIZE) % ALPHABET_SIZE + 'A');
}

// Function to find the multiplicative inverse of a modulo 26
int multiplicative_inverse(int a) {
    int x, y;
    extended_euclidean(a, ALPHABET_SIZE, &x, &y);
    if (x < 0) {
        x += ALPHABET_SIZE;
    }
    return x;
}

// Extended Euclidean algorithm to find the multiplicative inverse
void extended_euclidean(int a, int b, int *x, int *y) {
    if (a == 0) {
        *x = 0;
        *y = 1;
        return;
    }
    int x1, y1;
    extended_euclidean(b % a, a, &x1, &y1);
    *x = y1 - (b / a) * x1;
    *y = x1;
}

int main() {
    char plaintext[] = "HELLO WORLD";
    int plaintext_length = strlen(plaintext);

    // Choose a and b (ensure a is coprime with 26)
    int a = 7;
    int b = 13;

    int a_inverse = multiplicative_inverse(a);

    char ciphertext[plaintext_length];
    char decrypted_plaintext[plaintext_length];

    // Encrypt the plaintext
    for (int i = 0; i < plaintext_length; i++) {
        ciphertext[i] = affine_encrypt(plaintext[i], a, b);
    }

    // Decrypt the ciphertext
    for (int i = 0; i < plaintext_length; i++) {
        decrypted_plaintext[i] = affine_decrypt(ciphertext[i], a_inverse, b);
    }

    printf("Plaintext: %s\n", plaintext);
    printf("Ciphertext: %s\n", ciphertext);
    printf("Decrypted Plaintext: %s\n", decrypted_plaintext);

    return 0;
}
