#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

void generateKeyMatrix(char key[], char keyMatrix[SIZE][SIZE]) {
    int used[26] = {0};
    int i, j, index = 0;

    for (i = 0; key[i] != '\0'; i++) {
        if (key[i] == 'j') key[i] = 'i'; 
        if (!used[key[i] - 'a']) {
            keyMatrix[index / SIZE][index % SIZE] = key[i];
            used[key[i] - 'a'] = 1;
            index++;
        }
    }

    for (i = 0; i < 26; i++) {
        if (i == 9) continue; // skip 'j'
        if (!used[i]) {
            keyMatrix[index / SIZE][index % SIZE] = 'a' + i;
            index++;
        }
    }
}

void findPosition(char ch, char keyMatrix[SIZE][SIZE], int* row, int* col) {
    if (ch == 'j') ch = 'i'; 
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (keyMatrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

void encryptPair(char a, char b, char keyMatrix[SIZE][SIZE], char* res1, char* res2) {
    int row1, col1, row2, col2;

    findPosition(a, keyMatrix, &row1, &col1);
    findPosition(b, keyMatrix, &row2, &col2);

    if (row1 == row2) {
        *res1 = keyMatrix[row1][(col1 + 1) % SIZE];
        *res2 = keyMatrix[row2][(col2 + 1) % SIZE];
    } else if (col1 == col2) {
        *res1 = keyMatrix[(row1 + 1) % SIZE][col1];
        *res2 = keyMatrix[(row2 + 1) % SIZE][col2];
    } else {
        *res1 = keyMatrix[row1][col2];
        *res2 = keyMatrix[row2][col1];
    }
}

void prepareText(char text[], char prepared[]) {
    int i, j = 0;
    for (i = 0; text[i] != '\0'; i++) {
        if (text[i] == ' ') continue;
        if (tolower(text[i]) == 'j') text[i] = 'i';
        prepared[j++] = tolower(text[i]);
        if (j > 1 && prepared[j - 1] == prepared[j - 2]) {
            prepared[j - 1] = 'x'; 
        }
    }
    if (j % 2 != 0) {
        prepared[j++] = 'x'; 
    }
    prepared[j] = '\0';
}

void playfairEncrypt(char text[], char key[], char cipherText[]) {
    char keyMatrix[SIZE][SIZE];
    char preparedText[100];
    int i, j = 0;

    generateKeyMatrix(key, keyMatrix);
    prepareText(text, preparedText);

    for (i = 0; i < strlen(preparedText); i += 2) {
        char a = preparedText[i];
        char b = preparedText[i + 1];
        encryptPair(a, b, keyMatrix, &cipherText[j], &cipherText[j + 1]);
        j += 2;
    }
    cipherText[j] = '\0';
}

int main() {
    char key[30], text[100], cipherText[100];

    printf("Enter the keyword (no spaces): ");
    scanf("%s", key);

    printf("Enter the plaintext: ");
    scanf(" %[^\n]", text);

    playfairEncrypt(text, key, cipherText);

    printf("Encrypted text: %s\n", cipherText);

    printf("\n\n\nsuthesan vj   192210542\n");

    return 0;
}
