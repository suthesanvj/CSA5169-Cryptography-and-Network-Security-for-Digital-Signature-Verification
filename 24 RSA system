#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Extended Euclidean algorithm to find the multiplicative inverse
void extended_euclidean(int a, int b, int *x, int *y) {
if (a == 0) {
*x = 0;
*y = 1;
return;
}
int x1, y1;
extended_euclidean(b % a, a, &x1, &y1);
*x = y1 - (b / a) * x1;
*y = x1;
}

// RSA encryption
int rsa_encrypt(int m, int e, int n) {
int c = 1;
while (e > 0) {
if (e % 2 == 1) {
c = (c * m) % n;
}
m = (m * m) % n;
e /= 2;
}
return c;
}

// RSA decryption
int rsa_decrypt(int c, int d, int n) {
return rsa_encrypt(c, d, n);
}

int main() {
int n = 3599;
int e = 31;

// Factorization (using trial-and-error for this example)
int p, q;
for (p = 2; p * p <= n; p++) {
    if (n % p == 0) {
        q = n / p;
        break;
    }
}

if (p == 0 || q == 0) {
    printf("Error: Unable to factorize n\n");
    return 1;
}

// Totient calculation
int phi_n = (p - 1) * (q - 1);

// Private key calculation
int d;
extended_euclidean(e, phi_n, &d, NULL);
if (d < 0) {
    d += phi_n;
}

// Test encryption and decryption
int plaintext = 1234;
int ciphertext = rsa_encrypt(plaintext, e, n);
int decrypted_plaintext = rsa_decrypt(ciphertext, d, n);

printf("Public key: (e, n) = (%d, %d)\n", e, n);
printf("Private key: (d, n) = (%d, %d)\n", d, n);
printf("Plaintext: %d\n", plaintext);
printf("Ciphertext: %d\n", ciphertext);
printf("Decrypted plaintext: %d\n", decrypted_plaintext);

return 0;
}
